# frozen_string_literal: true

require_relative 'deck'
require_relative 'user'
require_relative 'bank'
require_relative 'game'

class Interface
  MENU = {
    1 => '–í–∑—è—Ç—å –∫–∞—Ä—Ç—É',
    2 => '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥',
    3 => '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã',
    4 => '–ù–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞',
    5 => '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',
    6 => '–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã'
  }.freeze

  attr_reader :menu

  def initialize
    @menu = MENU
  end

  def loading
    3.times do
      sleep 0.5
      print ' - '
    end
    puts ''
  end

  def user_input(input)
    puts "#{input}:"
    gets.chomp
  end

  def system_clear
    system 'clear'
  end

  def separator
    puts '-------------------------------------------'
  end

  def message_cards(player)
    puts player.name == 'Dealer' ? '–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:' : '–í–∞—à–∏ –∫–∞—Ä—Ç—ã:'
  end

  def message(output)
    puts "üó©  #{output} üó©"
  end

  def message_dealer_move
    puts 'üó©  –•–æ–¥ –¥–∏–ª–µ—Ä–∞ üó©'
  end

  def message_skip
    puts 'üó©  –î–∏–ª–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥ üó©'
  end

  def message_bank(bank_amount)
    puts "üèõ  –î–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ: #{bank_amount}$"
  end

  def show_account(message, user_account)
    puts "#{message} #{user_account}$"
  end

  def withseparator(method_name)
    method_name
    print "\n"
    separator
  end

  def show_menu
    puts '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ(–≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5):'
    @menu.each do |key, value|
      puts "#{key} üñù  #{value}"
    end
  end

  def game_return(user, dealer, bank)
    bank.return_bet(user)
    bank.return_bet(dealer)
    main_info(user, dealer, bank)
  end

  def game_output_info(user, dealer)
    message_cards(dealer)
    separator
    withseparator cards_in_hand(dealer, 'show')
    print "\n"

    message_cards(user)
    separator
    withseparator cards_in_hand(user, 'show')
    print "\n"
  end

  def start_game
    name = user_input('–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
    message("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, #{name}!")
    name
  end

  def cards_in_hand(player, show = nil)
    player.hand.cards.each do |card, _index|
      if show.nil?
        print ' | * | '
      else
        print "| #{card.name}#{card.suit} | "
      end
    end
    print "—Å—É–º–º–∞ –æ—á–∫–æ–≤: #{player.hand.scoring}" unless show.nil?
  end


  def game_cards_hands(user, dealer)
    puts '–£ –í–∞—Å –≤ —Ä—É–∫–µ:'
    separator
    withseparator cards_in_hand(user, 'show')
    puts '–í —Ä—É–∫–µ –î–∏–ª–µ—Ä–∞:'
    separator
    withseparator cards_in_hand(dealer)
  end

  def main_info(user, dealer, bank)
    show_account('–ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ:', user.cash)
    show_account('–°—á—ë—Ç –î–∏–ª–µ—Ä–∞:', dealer.cash)
    message_bank(bank.bank_amount)
  end

  def show(user, dealer, bank)
    game_output_info(user, dealer)
    if user.hand.scoring > dealer.hand.scoring && !user.hand.losing ||
       !user.hand.losing && dealer.hand.losing
      message('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
      bank.gain(user)
      main_info(user, dealer, bank)
    elsif user.hand.scoring == dealer.hand.scoring && !user.hand.losing
      message('–ù–∏—á—å—è!')
      game_return(user, dealer, bank)
    elsif user.hand.scoring < dealer.hand.scoring && !dealer.hand.losing ||
          user.hand.scoring > dealer.hand.scoring && !dealer.hand.losing
      message('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
      bank.gain(dealer)
      main_info(user, dealer, bank)
    else
      message('–ü–µ—Ä–µ–±–æ—Ä!')
      game_return(user, dealer, bank)
    end
    separator
    show_menu
  end
end
